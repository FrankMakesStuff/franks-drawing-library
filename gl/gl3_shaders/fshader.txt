#version 330 core

layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;
layout (location = 2) out vec4 RayColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoord;
in mat4 matTransform;

uniform sampler2D diffuseTexture;
uniform samplerCube shadowMap;

uniform vec3 lightColor;
uniform vec3 viewPos;
uniform vec3 lightPos;
uniform vec2 lightPos2D;
uniform float far_plane;
uniform bool fullbright;

vec3 sampleOffsetDirections[20] = vec3[]
(
   vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1), 
   vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1),
   vec3( 1,  1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1,  1,  0),
   vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
   vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1)
);

float calculateShadow( vec3 fragPos, float bias )
{
	int samples = 20;
	float viewDistance = length( viewPos - FragPos );
	float diskRadius = 0.05;
	
	float shadow = 0.0;
	
	// get vector between fragment position and light position
    vec3 fragToLight = fragPos - lightPos;
    
    float currentDepth = length( fragToLight );
    
    for( int i = 0; i < samples; ++i )
    {
    	float closestDepth = texture( shadowMap, fragToLight + sampleOffsetDirections[i] * diskRadius ).r;
    	
    	closestDepth *= far_plane;
    	if( currentDepth - bias > closestDepth )
    		shadow += 1.0;
    		
    		
	}
    shadow /= float( samples );
    
    return shadow;
}

void main()
{
	vec3 modColor = lightColor;

	// texture
	vec4 texColorAlpha = texture( diffuseTexture, TexCoord ).rgba;
	vec3 texColor = texColorAlpha.rgb;
	float alpha = texColorAlpha.a;
	
	float distance = length( lightPos - FragPos );
	float attenuation = 1.0 / (1.0 + 0.09 * distance + 0.032 * (distance * distance) );
	
	// ambient
	float ambientStrength = 0.01;
	vec3 ambient = ambientStrength * vec3(1.0, 1.0, 1.0);
	
	// diffuse
	vec3 norm = normalize( Normal );
	vec3 lightDir = normalize( lightPos - FragPos );
	float diff = max( dot( lightDir, norm ), 0.0 );
	vec3 diffuse = diff * modColor * attenuation;
	
	// specular
	float specularStrength = 0.1 ;
	vec3 viewDir = normalize( viewPos - FragPos );
	vec3 halfwayDir = normalize( lightDir + viewDir );
	float spec = pow( max( dot( norm, halfwayDir ), 0.0 ), 32);
	vec3 specular = specularStrength * spec * modColor * attenuation;
	
	// Shadow
	float bias = max( 0.75 * ( 1.0 - dot( norm, lightDir ) ), 0.05 );
	float shadow = calculateShadow( FragPos, bias );
	
	vec4 result = vec4( (ambient + ( 1.0 - shadow ) * ( diffuse + specular )) * texColor, alpha );
	
	// Fullbright
	if( fullbright == true ){
		result = vec4( 1.0, 1.0, 1.0, 1.0 );
	}
	
    float brightness = dot(result, vec4( 0.2126, 0.7152, 0.0722, 0.0 ));	// Determine highlights for Texture #2
    
    if(brightness > 0.5) // threshold
        BrightColor = result;
    else
        BrightColor = vec4(0.0, 0.0, 0.0, alpha);

	FragColor = result;
}
