layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoord;
in vec3 LightPos;

uniform sampler2D diffuseTexture;

uniform vec3 lightColor;
uniform vec3 objectColor;

void main()
{
	// texture
	vec3 texColor = texture( diffuseTexture, TexCoord ).rgb * objectColor;
	
	float distance = length( LightPos - FragPos );
	float attenuation = 1.0 / (1.0 + 0.09 * distance + 0.032 * (distance * distance) );
	
	// ambient
	float ambientStrength = 0.1;
	vec3 ambient = ambientStrength * vec3(1.0, 1.0, 1.0); // * lightColor * attenuation;
	
	// diffuse
	vec3 norm = normalize( Normal );
	vec3 lightDir = normalize( LightPos - FragPos );
	float diff = max( dot( norm, lightDir ), 0.0 );
	vec3 diffuse = diff * lightColor * attenuation;
	
	// specular
	float specularStrength = 0.5;
	vec3 viewDir = normalize( -FragPos );
	vec3 reflectDir = reflect( -lightDir, norm );
	float spec = pow( max( dot( viewDir, reflectDir ), 0.0 ), 16);
	vec3 specular = specularStrength * spec * lightColor * attenuation;
	
	vec3 result = (ambient + diffuse + specular) * texColor;
	
    float brightness = dot(result, vec3(0.2126, 0.7152, 0.0722));	// Determine highlights for Texture #2
    
    if(brightness > 0.5) // threshold
        BrightColor = vec4(result, 1.0);
    else
        BrightColor = vec4(0.0, 0.0, 0.0, 1.0);

	FragColor = vec4( result, 1.0 );
}
